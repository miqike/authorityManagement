package com.kysoft.kteam.plan.mapper;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.mapping.StatementType;

import com.kysoft.kteam.plan.entity.Plan;

public interface PlanMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	int deleteByPrimaryKey(String id);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	int insert(Plan record);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	int insertSelective(Plan record);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	Plan selectByPrimaryKey(String id);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	int updateByPrimaryKeySelective(Plan record);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table T_PLAN
	 * @mbggenerated  Mon Nov 30 13:41:24 CST 2015
	 */
	int updateByPrimaryKey(Plan record);
	List<Plan> queryPersonalPlan(Map<String, Object> param);

	List<Plan> selectPersonalPlan(Map<String, Object> param);

	List<Plan> queryDeptPlan(Map<String, Object> param);
	List<Plan> queryDeptPlan2(Map<String, Object> param);

	List<Plan> selectPlanItemsByParentId(@Param("id") String id,@Param("isDeptPlan") String isDeptPlan, @Param("sort") String sort, @Param("order") String order);

	List<Plan> queryByParentId(Map<String, Object> param);

	String selectNextSnByParentId(Map<String, Object> param);
	List<Plan> query(Map<String, Object> param);

	List<Plan> selectDeptPlanItems(@Param("orgId") String orgId, @Param("start") Date start, @Param("end") Date end,@Param("isSelfDeptFlag") String isSelfDeptFlag,
								   @Param("userId") String userId, @Param("sort") String sort, @Param("order") String order);

//	void updateStatusById(Plan plan);

	List<Plan> selectByOwnerId(String ownerId);

	List<Plan> selectByParentId(String parentId);

	@Update("call updateProgress(#{id}, #{progress,mode=IN})")
	@Options(statementType= StatementType.CALLABLE )
	void updateProgress(@Param("id") String id, @Param("progress") Integer progress);

	/*@Select("SELECT * FROM T_PLAN WHERE (IS_DEPT_PLAN = 1 AND STATUS >= 3 AND (OWNER_ID=#{participantId} OR SUPERINTENDENT_ID = #{participantId} OR VERIFIER_ID = #{participantId} OR COUPLER LIKE concat(concat('%',#{participantId}), '%'))) OR (IS_DEPT_PLAN = 0 AND OWNER_ID=#{participantId}) and START IS NOT NULL and END IS NOT NULL ")
	@ResultMap(value = "BaseResultMap")*/
	List<Plan> selectByParticipantId(@Param("participantId")String participantId, @Param("start")Date start, @Param("end")Date end);
}