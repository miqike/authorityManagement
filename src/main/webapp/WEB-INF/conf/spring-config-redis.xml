<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 启用注解 -->
	<context:annotation-config />

	<!-- redis连接池的配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<!-- 获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间, 
			默认-1 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
		<property name="testWhileIdle" value="false" />
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="usePool" value="true" />
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<bean id="redisHttpSessionConfiguration"
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<!-- 超时设置,单位秒,默认1800 -->
		<property name="maxInactiveIntervalInSeconds" value="1800" />
	</bean>

<!-- AutoLoadCache配置 -->
<!-- 
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg ref="jedisPoolConfig" />
		<constructor-arg>
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg value="${redis1.host}" />
					<constructor-arg type="int" value="${redis1.port}" />
					<constructor-arg value="instance:01" />
				</bean>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg value="${redis2.host}" />
					<constructor-arg type="int" value="${redis2.port}" />
					<constructor-arg value="instance:02" />
				</bean>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg value="${redis3.host}" />
					<constructor-arg type="int" value="${redis3.port}" />
					<constructor-arg value="instance:03" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<bean id="autoLoadConfig" class="com.jarvis.cache.to.AutoLoadConfig">
		<property name="threadCnt" value="10" />
		<property name="maxElement" value="20000" />
		<property name="printSlowLog" value="true" />
		<property name="slowLoadTime" value="500" />
		<property name="sortType" value="1" />
		<property name="checkFromCacheBeforeLoad" value="true" />
		<property name="autoLoadPeriod" value="50" />
	</bean>
	可以通过implements com.jarvis.cache.serializer.ISerializer<Object> 实现 Kryo 
		和 FST Serializer 工具，框架的核对不在这里，所以不提供过多的实现
	<bean id="hessianSerializer" class="com.jarvis.cache.serializer.HessianSerializer" />

	<bean id="cachePointCut" class="com.jarvis.cache.redis.ShardedCachePointCut"
		destroy-method="destroy">
		<constructor-arg ref="autoLoadConfig" />
		<property name="serializer" ref="hessianSerializer" />
		<property name="shardedJedisPool" ref="shardedJedisPool" />
		<property name="namespace" value="test_hessian" />
	</bean>
	注意 如果需要在MyBatis Mapper中使用，则需要使用com.jarvis.cache.mybatis.CachePointCutProxy 
		来处理。
	<aop:config proxy-target-class="true">
		<aop:aspect ref="cachePointCut">
			<aop:pointcut id="daoCachePointcut"
				expression="execution(public !void com.jarvis.cache_example.common.dao..*.*(..)) &amp;&amp; @annotation(cache)" />
			<aop:around pointcut-ref="daoCachePointcut" method="proceed" />
		</aop:aspect>
		<aop:aspect ref="cachePointCut" order="1000">
			order 参数控制 aop通知的优先级，值越小，优先级越高，在事务提交后删除缓存
			<aop:pointcut id="deleteCachePointcut"
				expression="execution(* com.jarvis.cache_example.common.dao..*.*(..)) &amp;&amp; @annotation(cacheDelete)" />
			<aop:after-returning pointcut-ref="deleteCachePointcut"
				method="deleteCache" returning="retVal" />
		</aop:aspect>
	</aop:config>
 -->
 </beans>